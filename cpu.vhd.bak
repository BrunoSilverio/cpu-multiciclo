LIBRARY ieee;
USE ieee.std_logic_1164.all;
USE ieee.std_logic_unsigned.all;

ENTITY CPU IS
PORT (
		Clock				:	IN STD_LOGIC;
		Ri, Rj, Rk, Rx		: 	OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
		)
END CPU;

ARCHITECTURE LogicFunction OF CPU IS
	COMPONENT Register8Bits
		PORT(
		    D   		: IN STD_LOGIC_VECTOR(7 DOWNTO 0);
		    RegWrite    : IN STD_LOGIC; 
		    Clear 	    : IN STD_LOGIC; 
		    Clock 	    : IN STD_LOGIC; 
		    Q   		: OUT STD_LOGIC_VECTOR(7 DOWNTO 0)); 
	END COMPONENT;
	
	COMPONENT Register16Bits
			PORT(
			 D   		: IN STD_LOGIC_VECTOR(15 DOWNTO 0);
			 RegWrite   : IN STD_LOGIC; 
			 Clear 	    : IN STD_LOGIC; 
			 Clock  	: IN STD_LOGIC; 
			 Q   		: OUT STD_LOGIC_VECTOR(15 DOWNTO 0));
	END COMPONENT;
	
	COMPONENT DataMemory
		PORT (
			Clock					: 		IN STD_LOGIC;
			InstructionNumber       : 		IN STD_LOGIC_VECTOR(7 DOWNTO 0);
			InstructionOut      	: 		OUT STD_LOGIC_vECTOR(15 DOWNTO 0));
	END COMPONENT;
	
	COMPONENT Mux4
		PORT (	
		    control                         : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
			input1, input2, input3, input4  : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
			output                          : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			clock                           : IN STD_LOGIC);
	END COMPONENT;
	
	COMPONENT Mux2
		PORT (
		    control         : IN STD_LOGIC;
			input1, input2  : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
			output          : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
			clock           : IN STD_LOGIC);
	END COMPONENT;
	
	COMPONENT ula
		PORT (
            Cin 				    :IN 	STD_LOGIC_VECTOR(1 DOWNTO 0);
	        Op 				        :IN 	STD_LOGIC_VECTOR(1 DOWNTO 0);
	        A, B				    :IN 	STD_LOGIC_VECTOR(7 DOWNTO 0);
	        Result 			        :OUT 	STD_LOGIC_VECTOR(7 DOWNTO 0);
	        Overflow, Cout, Zero    :OUT 	STD_LOGIC);
	END COMPONENT;
	
	COMPONENT unidadeControle
		PORT (
            Clock																: IN  STD_LOGIC;
            OpCode														        : IN  STD_LOGIC_VECTOR(3 DOWNTO 0);
            PCWrite, RegWrite, RegAuxWrite, IRWrite, MemToReg           	    : OUT STD_LOGIC;
            AluSrcA, AluSrcB, AluControl 								        : OUT STD_LOGIC_VECTOR (1 DOWNTO 0);
            Reset																: IN  STD_LOGIC);
    END COMPONENT;
    
    COMPONENT bancoReg
		PORT (		
    		Clock: IN STD_LOGIC;
    		RegWrite: IN STD_LOGIC;
    		readAdress1, readAdress2: IN STD_LOGIC_VECTOR(4 DOWNTO 0);
    		writeAdress : IN STD_LOGIC_VECTOR(1 DOWNTO 0);
    		writeData : IN STD_LOGIC_VECTOR(7 DOWNTO 0);
    		readData1, readData2 : OUT STD_LOGIC_VECTOR(7 DOWNTO 0);
    END COMPONENT;
	
	-- Sinais de controle
	SIGNAL RegWrite : STD_LOGIC;
	SIGNAL PCWrite	: STD_LOGIC;
	SIGNAL MemToReg : STD_LOGIC;
	SIGNAL RegAuxWrite : STD_LOGIC;
	SIGNAL AluSrcA : STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL AluSrcB : STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL ALUOp : STD_LOGIC_VECTOR(1 DOWNTO 0);
	SIGNAL IRWrite : STD_LOGIC
	
	-- Instrucao
	SIGNAL Instruction : STD_LOGIC_VECTOR(15 DOWNTO 0);
	SIGNAL DataMemOut  : STD_LOGIC_VECTOR(15 DOWNTO 0);
	
	-- Saida do reg
	SIGNAL PCOut              : STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL RegAuxOut          : STD_LOGIC_VECTOR(7 DOWNTO 0);
	SIGNAL RegAOut, RegBOut   : STD_LOGIC_VECTOR(7 DOWNTO 0);
	
	-- Saida ALU 
	SIGNAL ALUCarry, ALUZero, ALUOvf : STD_LOGIC;
	SIGNAL ALUOut                    : STD_LOGIC_VECTOR(7 DOWNTO 0);
BEGIN
	-- Reg
	RegAux 		: Register8(RegAOut, RegAuxWrite, '0', Clock, RegAuxOut);
	PC 			: Register8 PORT MAP(ALUOut, PCWrite, '0', Clock, PCOut);
	RegInst		: Register16 PORT MAP(DataMemOut ,IRWrite, '0', Clock, Instruction);

	--Mux
	MuxRegData 	: Mux2 PORT MAP(MemToReg, ALUOut, RegAuxOut, MuxRegDataOut, Clock);
	MuxUlaA 	: Mux4 PORT MAP(AluSrcA, RegAOut, RegAuxOut, "00000000", PCOut, MuxAOut, Clock);
	MuxUlaB		: Mux4 PORT MAP(AluSrcB, RegBOut, Instruction(8 to 15), "00000001", "00000000", MuxBOut, Clock);
	
	-- Components
	BancoReg	: BancoReg PORT MAP(Clock, RegWrite, Instruction(6 to 7), Instruction(8 to 9), Instruction(4 to 5), MuxRegDataOut, RegAOut, RegBOut, Ri, Rj, Rk, Rx);
	DataMemory 	: DataMemory PORT MAP(Clock, PCOut, DataMemOut);
	ALU			: ULA PORT MAP(Clock, ALUOp, MuxAOut, MuxBOut, ALUCarry, ALUZero, ALUOvf, ALUOut);
	
	
END LogicFunction;